{
  "name": "Violations-lib",
  "tagline": "Library for parsing report files from static code analyzis.",
  "body": "# Violations Lib [![Build Status](https://travis-ci.org/tomasbjerre/violations-lib.svg?branch=master)](https://travis-ci.org/tomasbjerre/violations-lib) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/se.bjurr.violations/violations-lib/badge.svg)](https://maven-badges.herokuapp.com/maven-central/se.bjurr.violations/violations-lib)\r\n\r\nThis is a library for parsing report files from static code analysis.\r\n\r\nIt supports:\r\n * [_AndoidLint_](http://developer.android.com/tools/help/lint.html)\r\n * [_Checkstyle_](http://checkstyle.sourceforge.net/) ([_ESLint_](https://github.com/sindresorhus/grunt-eslint) with `format: 'checkstyle'`)\r\n * [_CodeNarc_](http://codenarc.sourceforge.net/)\r\n * [_CPD_](http://pmd.sourceforge.net/pmd-4.3.0/cpd.html)\r\n * [_CPPLint_](https://github.com/theandrewdavis/cpplint)\r\n * [_CPPCheck_](http://cppcheck.sourceforge.net/)\r\n * [_CSSLint_](https://github.com/CSSLint/csslint)\r\n * [_Findbugs_](http://findbugs.sourceforge.net/)\r\n * [_Flake8_](http://flake8.readthedocs.org/en/latest/) ([_Pep8_](https://github.com/PyCQA/pycodestyle), [_Mccabe_](https://pypi.python.org/pypi/mccabe), [_PyFlakes_](https://pypi.python.org/pypi/pyflakes))\r\n * [_FxCop_](https://en.wikipedia.org/wiki/FxCop)\r\n * [_Gendarme_](http://www.mono-project.com/docs/tools+libraries/tools/gendarme/)\r\n * [_JSHint_](http://jshint.com/)\r\n * _Lint_ A common XML format, used by different linters.\r\n * [_JCReport_](https://github.com/jCoderZ/fawkez/wiki/JcReport)\r\n * [_PerlCritic_](https://github.com/Perl-Critic)\r\n * [_PiTest_](http://pitest.org/)\r\n * [_PyLint_](https://www.pylint.org/)\r\n * [_PMD_](https://pmd.github.io/)\r\n * [_ReSharper_](https://www.jetbrains.com/resharper/)\r\n * [_Simian_](http://www.harukizaemon.com/simian/)\r\n * [_StyleCop_](https://stylecop.codeplex.com/)\r\n * [_XMLLint_](http://xmlsoft.org/xmllint.html)\r\n * [_ZPTLint_](https://pypi.python.org/pypi/zptlint)\r\n\r\nExample reports are available [in the test resources](https://github.com/tomasbjerre/violations-lib/tree/master/src/test/resources), examples of how to generate them are available [here](https://github.com/tomasbjerre/violations-test/blob/master/build.sh).\r\n\r\nVery easy to use with a nice builder pattern\r\n```\r\n  List<Violation> violations = violationsReporterApi() //\r\n    .withPattern(\".*/findbugs/.*\\\\.xml$\") //\r\n    .inFolder(rootFolder) //\r\n    .findAll(FINDBUGS) //\r\n    .violations();\r\n```\r\n\r\nOr\r\n\r\n```\r\n  List<Violation> violations = violationsAccumulatedReporterApi() //\r\n    .withViolations( //\r\n      violationsReporterApi() //\r\n      .withPattern(\".*/findbugs/.*\\\\.xml$\") //\r\n      .inFolder(rootFolder) //\r\n      .findAll(FINDBUGS) //\r\n      .violations() //\r\n    ) //\r\n    .withViolations( //\r\n      violationsReporterApi() //\r\n      .withPattern(\".*/pmd/.*\\\\.xml$\") //\r\n      .inFolder(rootFolder) //\r\n      .findAll(PMD) //\r\n      .violations() //\r\n    ) //\r\n    .withAtLeastSeverity(ERROR)//\r\n    .orderedBy(FILE)//\r\n    .violations();\r\n```\r\n\r\nIt is used by:\r\n * [Violation Comments to GitHub Gradle Plugin](https://github.com/tomasbjerre/violation-comments-to-github-gradle-plugin).\r\n * [Violation Comments to GitHub Maven Plugin](https://github.com/tomasbjerre/violation-comments-to-github-maven-plugin).\r\n * [Violation Comments to GitHub Jenkins Plugin](https://github.com/jenkinsci/violation-comments-to-github-plugin).\r\n * [Violation Comments to GitHub Lib](https://github.com/tomasbjerre/violation-comments-to-github-lib).\r\n * [Violation Comments to Bitbucket Server Jenkins Plugin](https://github.com/jenkinsci/violation-comments-to-stash-plugin).\r\n * [Violation Comments to Bitbucket Server Lib](https://github.com/tomasbjerre/violation-comments-to-bitbucket-server-lib).\r\n * [Violation Comments Lib](https://github.com/tomasbjerre/violation-comments-lib).\r\n\r\n## Developer instructions\r\n\r\nTo build the code, have a look at `.travis.yml`.\r\n\r\nTo do a release you need to do `./gradlew release` and release the artifact from [staging](https://oss.sonatype.org/#stagingRepositories). More information [here](http://central.sonatype.org/pages/releasing-the-deployment.html).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}